;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Sun Apr 26 12:01:26 2020
;; Desktop file format version 208
;; Emacs version 26.3

;; Global section:
(setq desktop-saved-frameset [frameset 1 (24229 27142 190799 13000) (desktop . "208") "lem@lem-X551MA" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-PfEd-DejaVu Sans Mono-normal-normal-normal-*-13-*-*-*-m-0-iso10646-1") (font-parameter . "DejaVu Sans Mono-10") (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#b2b2b2") (background-color . "#292b2e") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 0) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#e3dedd") (sticky) (environment) (powerline-cache) (frameset--id . "3116-144D-7FB5-E2CD") (frameset--mini t . t) (modeline . t) (unsplittable) (icon-name) (display . ":0") (explicit-name) (fullscreen-restore) (height . 45) (width . 168) (left . 0) (top . 0)) ((min-height . 4) (min-width . 20) (min-height-ignore . 4) (min-width-ignore . 8) (min-height-safe . 1) (min-width-safe . 4) (min-pixel-height . 68) (min-pixel-width . 160) (min-pixel-height-ignore . 68) (min-pixel-width-ignore . 64) (min-pixel-height-safe . 17) (min-pixel-width-safe . 32)) hc (pixel-width . 1366) (pixel-height . 751) (total-width . 171) (total-height . 44) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 684) (pixel-height . 751) (total-width . 86) (total-height . 44) (normal-height . 1.0) (normal-width . 0.5013586956521738) (buffer "*eww*" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 57479) (start . 57471))) (leaf (last . t) (pixel-width . 682) (pixel-height . 751) (total-width . 85) (total-height . 44) (normal-height . 1.0) (normal-width . 0.4986413043478261) (buffer "core.clj" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 1487) (start . 1309)))))])
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring '("set" "clojure" "chapter 3" "how" "ipad1" "circle" "pad3"))
(setq regexp-search-ring '("map" "\\(hobbit\\).*?\\(v\\)" "my-f" "defn" "\\((first\\).*?\\([+]\\).*?\\()\\)" "first" "contains" "#{" "cider" "avy" "\\(*\\).*?\\(key\\)" "xah-fly-keys" "chord" "\\(*\\).*?\\(avy\\)" "use-package-chords" "use-package"))
(setq register-alist nil)
(setq file-name-history '("/home/lem/Documents/clojure/" "/home/lem/.emacs.d/.git/info/exclude" "/home/lem/.emacs.d/.git/" "/home/lem/Documents/placementAssignments/" "/home/lem/Documents/grannieIPadInstructions/instructions.tex" "/home/lem/Documents/grannieIPadInstructions"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/lem/Documents/clojure/clojure-noob/src/clojure_noob/core.clj"
  "core.clj"
  'clojure-mode
  '(subword-mode override-global-mode xah-fly-keys beacon-mode which-key-mode company-mode dimmer-mode highlight-parentheses-mode flycheck-mode cider-mode ivy-mode counsel-mode rainbow-mode)
  1487
  '(3835 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-display-time 24229 27139 805943 669000) (buffer-file-coding-system . undecided-unix))
  '((mark-ring (4188 4186 3943 4185 4135 4185 3958 3943 3569 1700 1524 1393 1173 1123 667 373))))

(desktop-create-buffer 208
  nil
  "*eww*"
  'eww-mode
  '(subword-mode override-global-mode beacon-mode which-key-mode company-mode dimmer-mode highlight-parentheses-mode ivy-mode counsel-mode)
  57479
  '(58438 nil)
  t
  '(:history ((:point 47382 :title "Do Things: A Clojure Crash Course | Clojure for the Brave and True" :url "https://www.braveclojure.com/do-things/") (:title "Learn to Program the World's Most Bodacious Language with Clojure for the Brave and True" :url "https://www.braveclojure.com/clojure-for-the-brave-and-true/" :point 857) (:title "Learn to Program the World's Most Bodacious Language with Clojure for the Brave and True" :url "https://www.braveclojure.com/" :point 543) (:title "" :url "https://duckduckgo.com/l/?kh=-1&uddg=https%3A%2F%2Fwww.braveclojure.com%2F" :point 1) (:title "clojure brave true at DuckDuckGo" :url "https://duckduckgo.com/html/?q=clojure+brave+true" :point 104)))
  '((buffer-display-time 24229 27141 183380 977000) (buffer-file-coding-system . utf-8-unix) (truncate-lines . t) (eww-history-position . 0))
  '((mark-ring (56204 55892 52752 51113 49642 48362 45436 43957 42593 40768 37264 35411 34392 32800 31093 27723))))

