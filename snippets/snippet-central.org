Hello and welcome to snippets central, home to all snippets in this config. (eventually)

This document makes use of org-babel src blocks to create various snippets and associated files for use with the yasnippet minor mode by "tangling" them from the many src blocks below.

* Snippets
** eshell-mode
*** gitcommit
#+BEGIN_SRC snippet :tangle ./eshell-mode/gitcommit
  # -*- mode: snippet -*-
  # name: git commit
  # key: com
  # --
  git commit -m "$1"$0
#+END_SRC

** cc-mode
*** if statement
#+BEGIN_SRC snippet :tangle ./cc-mode/if
  # -*- mode: snippet -*-
  # name: jacob if
  # key: if
  # --
  if (${1:condition})
  {
      $0
  }
#+END_SRC

*** else statement
#+BEGIN_SRC snippet :tangle ./cc-mode/else
  # -*- mode: snippet -*-
  # name: jacob else
  # key: else
  # --
  else
  {
      $0
  }
#+END_SRC

*** while loop
#+BEGIN_SRC snippet :tangle ./cc-mode/while
  # -*- mode: snippet -*-
  # name: jacob while
  # key: while
  # --
  while (${1:condition})
  {
      $0
  }
#+END_SRC

*** do while loop
#+BEGIN_SRC snippet :tangle ./cc-mode/do while loop
  # -*- mode: snippet -*-
  # name: do { ... } while (...)
  # key: do
  # --
  do
  {
      $0
  } while (${1:condition});
#+END_SRC

*** for loop
#+BEGIN_SRC snippet :tangle ./cc-mode/for
  # -*- mode: snippet -*-
  # name: jacob for
  # key: for
  # --
  for (${1:int i = 0}; ${2:i < 10}; ${3:i++})
  {
      $0
  }
#+END_SRC

*** switch
#+BEGIN_SRC snippet :tangle ./cc-mode/switch
  # -*- mode: snippet -*-
  # name: jacob switch
  # key: switch
  # --
  switch (${1:expr})
  {
      case ${2:constexpr}:
      {
          $0
          break;
      }
      default:
      {
          break;
      }
  }
#+END_SRC

*** case
#+BEGIN_SRC snippet :tangle ./cc-mode/case
  # -*- mode: snippet -*-
  # name: case : {...}
  # key: case
  # expand-env: ((yas-also-auto-indent-first-line t))
  # --
  case ${2:constexpr}:
  {
      $0
      break;
  }
#+END_SRC

*** struct
#+BEGIN_SRC snippet :tangle ./cc-mode/struct
  # -*- mode: snippet -*-
  # name: struct ... { ... }
  # key: struct
  # --
  struct ${1:name}
  {
      $0
  };
#+END_SRC

*** ternary
#+BEGIN_SRC snippet :tangle ./cc-mode/ternary
  # -*- mode: snippet -*-
  # name: ternary
  # key: ?
  # --
  (${1:cond}) ? ${2:then} : ${3:else};
#+END_SRC

*** printf
#+BEGIN_SRC snippet :tangle ./cc-mode/printf
  # -*- mode: snippet -*-
  # name: printf
  # key: printf
  # --
  printf("${1:%s}\\n"${1:$(if (string-match "%" yas-text) ", " "\);")
  }$2${1:$(if (string-match "%" yas-text) "\);" "")}
#+END_SRC
** csharp-mode
*** .yas-parents
#+BEGIN_SRC snippet :tangle ./csharp-mode/.yas-parents
  cc-mode
#+END_SRC

*** attrib
#+BEGIN_SRC snippet :tangle ./csharp-mode/attrib
  # -*- mode: snippet -*-
  # contributor : Alejandro Espinoza Esparza <aespinoza@structum.com.mx>
  # name: private _attribute ....; public Property ... ... { ... }
  # key: attrib
  # --
  private $1 ${2:$(if (> (length yas-text) 0) (format "_%s%s" (downcase (substring yas-text 0 1)) (substring yas-text 1 (length yas-text))) "")};

  public ${1:Type} ${2:Name}
  {
      get {
          return ${2:$(if (> (length yas-text) 0) (format "_%s%s" (downcase (substring yas-text 0 1)) (substring yas-text 1 (length yas-text))) "")};
      }
      set {
          ${2:$(if (> (length yas-text) 0) (format "_%s%s" (downcase (substring yas-text 0 1)) (substring yas-text 1 (length yas-text))) "")} = value;
      }
  }
#+END_SRC

*** class
#+BEGIN_SRC snippet :tangle ./csharp-mode/class
  # -*- mode: snippet -*-
  # name: class ... { ... }
  # key: class
  # --
  namespace ${1:`(namespace-get)`}
  {
      public class ${2:`(file-name-sans-extension (file-name-nondirectory (buffer-file-name)))`}
      {
          $0
      }
  }
#+END_SRC

*** constructor
#+BEGIN_SRC snippet :tangle ./csharp-mode/constructor
  # -*- mode: snippet -*-
  # name: jacob constructor ....;
  # key: cons
  # --
  public `(file-name-sans-extension (file-name-nondirectory (buffer-file-name)))`($1)
  {
      $0
  }
#+END_SRC

*** field
#+BEGIN_SRC snippet :tangle ./csharp-mode/field
  # -*- mode: snippet -*-
  # name: jacob private field ....;
  # key: field
  # --
  private ${1:string} _${2:fieldName};$0
#+END_SRC

*** fore
#+BEGIN_SRC snippet :tangle ./csharp-mode/fore
  # -*- mode: snippet -*-
  # contributor : Jostein Kj√∏nigsen <jostein@kjonigsen.net>
  # name: foreach { ... }
  # key: fore
  # --
  foreach (${1:var} ${2:item} in ${3:list})
  {
      $0
  }
#+END_SRC
*** list
#+BEGIN_SRC snippet :tangle ./csharp-mode/list
  # -*- mode: snippet -*-
  # name: list
  # key: list
  # --
  new List<$1>();$0
#+END_SRC
*** main
#+BEGIN_SRC snippet :tangle ./csharp-mode/main
  # -*- mode: snippet -*-
  # name: main
  # key: main
  # --
  static void Main(string[] args)
  {
      $0
  }
#+END_SRC
*** method
#+BEGIN_SRC snippet :tangle ./csharp-mode/method
  # -*- mode: snippet -*-
  # contributor : Alejandro Espinoza Esparza <aespinoza@structum.com.mx>
  # name: public void Method { ... }
  # key: method
  # --
  ${1:public} ${2:void} ${3:MethodName}($4)
  {
      $0
  }
#+END_SRC
*** namespace
#+BEGIN_SRC snippet :tangle ./csharp-mode/namespace
  # -*- mode: snippet -*-
  # contributor : Alejandro Espinoza Esparza <aespinoza@structum.com.mx>
  # name: namespace .. { ... }
  # key: namespace
  # --
  namespace ${1:File.Namespace}
  {
      $0
  }
#+END_SRC
** java-mode
*** .yas-parents
#+BEGIN_SRC snippet :tangle ./java-mode/.yas-parents
  cc-mode
#+END_SRC

*** sout
#+BEGIN_SRC snippet :tangle ./java-mode/sout :padline no
  # -*- mode: snippet -*-
  # name: sout
  # key: sout
  # --
  System.out.println(${1:"Hello, World."});$0
#+END_SRC
