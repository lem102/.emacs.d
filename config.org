* Built-in settings
** Inhibit Startup Message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Reduce lag
#+BEGIN_SRC emacs-lisp
  (setq auto-window-vscroll nil)
  (setq redisplay-dont-pause t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/myLisp/jacob-long-time")
  (jacob-long-time-toggle)
#+END_SRC

** Highlight current line but only in graphical mode
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :defer 2
    :config (when window-system (global-hl-line-mode t)))
#+END_SRC

** stop the bell ringing all the time
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** prevent the view of the screen jumping to the middle when scrolling out of the view.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** get rid of toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** get rid of menubar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

** get rid of scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

** auto insert closing bracket (electric pair)
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

** make cursor movement stop in between camelCase words.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** make typing delete/overwrite region
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** turn on bracket match highlight
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** stop emacs creating backups~
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** stop emacs creating #autosaves#
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

** stop emacs from creating .#lock file links
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

** backups don't destroy original file's creation date
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
#+END_SRC

** y/n instead of yes/no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** show the current time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** Expert mode for ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** Dired open new directory in same buffer
#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^")(lambda () (interactive)(find-alternate-file "..")))
#+END_SRC

** Dired default copy location is next open dired buffer
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

** Dired Hide Details Always
#+BEGIN_SRC emacs-lisp
  (defun xah-dired-mode-setup()
	(dired-hide-details-mode 1))
  (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
#+END_SRC

** don't truncate
#+BEGIN_SRC emacs-lisp
  (toggle-truncate-lines)
#+END_SRC

** Add lisp folder to load path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

** Font Setup
#+BEGIN_SRC emacs-lisp
  (when (member "DejaVu Sans Mono" (font-family-list))
	  (add-to-list 'initial-frame-alist '(font . "DejaVu Sans Mono-10"))
	  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10")))
#+END_SRC

** Save minibuffer history (useful for compile)
#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
#+END_SRC
** Startup time
#+BEGIN_SRC emacs-lisp
;; loading without config takes 0.7 seconds
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC
* Personal Functions
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (defun jacob-org-src-block ()
    "Replacement for C-c ' in both \"org-mode\" and when editing code blocks within \"org-mode\"."
    (interactive)
    (if (bound-and-true-p org-src-mode)
        (org-edit-src-exit)
      (if (equal major-mode 'org-mode)
          (org-edit-special))))

  (defun jacob-recompile-packages ()
    "Recompile all packages."
    (interactive)
    (byte-recompile-directory package-user-dir nil 'force))

  (defun jacob-split-window-below-select-new ()
    "Splits current window vertically, then switch to new window."
    (interactive)
    (split-window-below)
    (other-window 1))


  (defun jacob-split-window-right-select-new ()
    "Splits current window horizontally, then switch to new window."
    (interactive)
    (split-window-right)
    (other-window 1))
#+END_SRC

* Xah Fly Keys
#+BEGIN_SRC emacs-lisp
  (use-package xah-fly-keys

    :ensure t

    :demand

    :custom
    (xah-fly-use-control-key nil)

    :init
    (defun jacob-xah-command-binds ()
      "Set custom keys for xah-fly-keys keybindings."
      (define-key xah-fly-key-map (kbd "a") 'counsel-M-x)
      (define-key xah-fly-key-map (kbd "n") 'swiper)
      (define-key xah-fly-key-map (kbd "8") 'er/expand-region)
      (define-key xah-fly-key-map (kbd "4") 'jacob-split-window-below-select-new))

    :config
    (define-prefix-command 'jacob-config-keymap)
    (xah-fly-keys-set-layout "qwerty")
    (xah-fly-keys 1)

    (add-hook 'xah-fly-command-mode-activate-hook 'jacob-xah-command-binds)
    (jacob-xah-command-binds) ;; call it on startup so binds are set without calling xah-fly-command-mode-activate first.

    (add-hook 'dired-mode-hook 'xah-fly-keys-off)
    (add-hook 'eww-mode-hook 'xah-fly-keys-off)
    (add-hook 'ibuffer-mode-hook 'xah-fly-keys-off)
    (add-hook 'custom-mode-hook 'xah-fly-keys-off)

    (key-chord-define xah-fly-key-map "fd" 'xah-fly-command-mode-activate)

    :bind
    (:map jacob-config-keymap
          ("r" . config-reload)
          ("R" . restart-emacs)
          ("e" . config-visit)
          ("c" . jacob-org-src-block)
          ("p" . jacob-recompile-packages)
          ("t" . jacob-long-time-toggle))
    (:map xah-fly-dot-keymap
          ("c" . jacob-config-keymap))
    (:map xah-fly-leader-key-map
          ("4" . jacob-split-window-right-select-new)))
#+END_SRC
* General Keybindings
** Setting right windows key to act as super key
#+BEGIN_SRC emacs-lisp
  (setq w32-pass-rwindow-to-system nil
		w32-rwindow-modifier 'super)
#+END_SRC

** Setting app key to act as hyper key
#+BEGIN_SRC emacs-lisp
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper)
#+END_SRC

** Tabs
#+BEGIN_SRC emacs-lisp
  ;; use spaces to indent
  (setq-default indent-tabs-mode nil)
  ;; set default tab char's display width to 4 spaces
  (setq-default tab-width 4)
  ;; make tab key call indent command or insert tab character, depending on cursor position
  (setq-default tab-always-indent nil)
#+END_SRC

* WDired
#+BEGIN_SRC emacs-lisp
  (defun jacob-teardown-xah-for-wdired ()
    (interactive)
    (wdired-finish-edit)
    (define-key xah-fly-leader-key-map (kbd ";") 'save-buffer)
    (xah-fly-keys-off))

  (defun jacob-setup-xah-for-wdired ()
    (interactive)
    (xah-fly-keys)
    (define-key xah-fly-leader-key-map (kbd ";") 'jacob-teardown-xah-for-wdired))

  (add-hook 'wdired-mode-hook 'jacob-setup-xah-for-wdired)
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
    (use-package dired
      :bind
      (:map dired-mode-map
            ("," . switch-window)
            ("SPC" . xah-fly-leader-key-map)
            ("p" . dired-maybe-insert-subdir)
            ("i" . dired-previous-line)
            ("k" . dired-next-line)
            ("n" . swiper)
            ("f" . dired-toggle-read-only)
            ("q" . xah-close-current-buffer)))
#+END_SRC
* Major Mode Packages
** Org
 #+BEGIN_SRC emacs-lisp
   (use-package org
     :mode ("\\.org\\'" . org-mode)
     :config
     (add-to-list 'org-structure-template-alist
                '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")))
 #+END_SRC

** yaml-Mode
 #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
     :ensure t
     :defer t
     :mode ("\\.yml\\'" . csharp-mode))
 #+END_SRC

** c-mode
*** tab width
 #+BEGIN_SRC emacs-lisp
   (setq-default c-basic-offset 4)
 #+END_SRC

** csharp-mode
 #+BEGIN_SRC emacs-lisp
   (use-package csharp-mode
     :ensure t
     :defer t
     :config
     (defun my-csharp-mode-setup ()
       (setq c-syntactic-indentation t)
       (c-set-style "ellemtel")
       (setq c-basic-offset 4))
     :hook
     (csharp-mode . my-csharp-mode-setup)
     :mode
     ("\\.cs\\$" . csharp-mode))
 #+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t

    :preface (defun jacob-web-mode-config ()
               (interactive)
               (setq-local electric-pair-pairs '((?\" . ?\") (?\< . ?\>)))
               (yas-activate-extra-mode 'html-mode))

    :config (setq web-mode-engines-alist
                  '(("razor"	. "\\.cshtml\\'")))

    :hook (web-mode . jacob-web-mode-config)

    :custom (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)

    :mode (("\\.html?\\'" . web-mode)
           ("\\.cshtml\\'" . web-mode)
           ("\\.css\\'" . web-mode)))
#+END_SRC
** json-mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode ("\\.json\\$" . json-mode))
#+END_SRC

** clojure-mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :mode ("\\.clj\\$" . clojure-mode))
#+END_SRC

** GDScript
#+BEGIN_SRC emacs-lisp
(use-package gdscript-mode
  :ensure t
  :custom (gdscript-use-tab-indents nil))
#+END_SRC
* Minor Mode Packages
** beacon
 #+BEGIN_SRC emacs-lisp
   (use-package beacon
	 :ensure t
     :defer 2
	 :diminish
	 :config
	 (beacon-mode 1))
 #+END_SRC

** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
	 :ensure t
     :defer 2
	 :diminish
	 :config
	 (which-key-mode))
 #+END_SRC

** company
 #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :diminish
     :hook ((emacs-lisp-mode csharp-mode) . company-mode)
     :custom
     (company-idle-delay 0.5)
     (company-minimum-prefix-length 3))
 #+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer 2
    :diminish
    :custom
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t)
    (define-key xah-fly-dot-keymap (kbd "p") projectile-command-map))
#+END_SRC

** avy
 #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :defer 1
     :config
     (key-chord-define xah-fly-key-map "fj" 'avy-goto-char-timer)
     (key-chord-define xah-fly-key-map "fk" 'avy-goto-word-or-subword-1)
     (key-chord-define xah-fly-key-map "fl" 'avy-goto-line)
     (key-chord-define xah-fly-key-map "f;" 'avy-goto-end-of-line))
 #+END_SRC

** rainbow-mode
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
	 :ensure t
	 :diminish
	 :hook prog-mode)
 #+END_SRC

** dimmer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
	:ensure t
    :defer 5
	:config
	(dimmer-mode))
#+END_SRC

** omnisharp
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
     :ensure t
     :defer t
     :after company
     :hook (csharp-mode . omnisharp-mode)
     :bind
     (:map jacob-omnisharp-keymap
           ("u" . omnisharp-fix-usings)
           ("d" . omnisharp-go-to-definition)
           ("s" . omnisharp-start-omnisharp-server)
           ("S" . omnisharp-stop-server))
     :config
     (define-prefix-command 'jacob-omnisharp-keymap)
     (define-key xah-fly-dot-keymap (kbd "o") jacob-omnisharp-keymap)
     (add-hook 'omnisharp-mode-hook (lambda ()
                                      (add-to-list (make-local-variable 'company-backends)
                                                   '(company-omnisharp))))
     :custom
     (omnisharp-company-ignore-case nil)
     (omnisharp-server-executable-path "D:\\Programming\\OmniSharp\\omnisharp-roslyn\\bin\\Debug\\OmniSharp.Stdio.Driver\\net472\\OmniSharp.exe"))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t

    :hook
    (((csharp-mode web-mode) . yas-minor-mode))
    
    :config
    (yas-reload-all))
#+END_SRC

** key-chord
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :defer 1

    :config
    (key-chord-mode 1))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    ;; For some reason, I am unable to diminish flycheck with :diminish
    :config (diminish 'flycheck-mode)
    :hook ((csharp-mode emacs-lisp-mode) . flycheck-mode)) ;; TODO this hook is fugged
#+END_SRC

** cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :diminish
    :ensure t
    :mode ("\\.clj\\$" . clojure-mode))
#+END_SRC

* Non-mode Packages
** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
	:ensure t
	:defer t)
#+END_SRC

** smex
 #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :config (smex-initialize)
     :bind
     ("M-x" . smex))
 #+END_SRC

** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
	:ensure t
	:defer t
	:config
	(diminish 'subword-mode)
	(diminish 'org-src-mode)
	(diminish 'eldoc-mode))
#+END_SRC

** switch-window
 #+BEGIN_SRC emacs-lisp
   (use-package switch-window
	 :ensure t
	 :defer t
	 :config
	 (setq switch-window-input-style 'minibuffer)
	 (setq switch-window-threshold 2)
	 (setq switch-window-multiple-frames t)
	 (setq switch-window-shortcut-style 'qwerty)
	 (setq switch-window-qwerty-shortcuts
		   '("q" "w" "e" "r" "a" "s" "d" "f" "z" "x" "c" "v"))
	 :bind
	 ([remap xah-next-window-or-frame] . switch-window))
 #+END_SRC

** ivy
 #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish
     :defer 1

     :bind
     (:map xah-fly-leader-key-map
           ("v" . counsel-yank-pop))

     :custom
     (enable-recursive-minibuffers t)

     :config
     (ivy-mode 1))
 #+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :after ivy)
#+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :diminish
    :after ivy
  
    :config (counsel-mode))
#+END_SRC

** multiple-cursors
 #+BEGIN_SRC emacs-lisp
   (use-package multiple-cursors
	 :ensure t
	 :bind
	 (:map xah-fly-dot-keymap
		   ("m" . jacob-multiple-cursors-keymap)
	 :map jacob-multiple-cursors-keymap
		   ("l" . mc/edit-lines)
		   (">" . mc/mark-next-like-this)
		   ("<" . mc/mark-previous-like-this)
		   ("a" . mc/mark-all-like-this))
	 :init
	 (define-prefix-command 'jacob-multiple-cursors-keymap))
 #+END_SRC

** expand-region
 #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :custom
     (expand-region-contract-fast-key "9"))
 #+END_SRC

** shell-pop
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :init
    (defun jacob-shell-pop-eshell ()
    (interactive)
    (let ((shell-pop-shell-type '("eshell" "*eshell*" (lambda () (eshell))))
          (shell-pop-term-shell "eshell"))
      (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type)
      (call-interactively 'shell-pop)))

    (defun jacob-shell-pop-shell ()
      (interactive)
      (let ((shell-file-name "/bin/bash")
            (shell-pop-shell-type '("shell" "*shell*" (lambda () (shell))))
            (shell-pop-term-shell "shell"))
        (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type)
        (call-interactively 'shell-pop)))
    :bind
    (:map xah-fly-n-keymap
          ("d" . jacob-shell-pop-eshell)
          ("f" . jacob-shell-pop-shell)))
#+END_SRC

** move-text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
	:ensure t
	:config
	(move-text-default-bindings))
#+END_SRC

** eshell-up
#+BEGIN_SRC emacs-lisp
  (use-package eshell-up
	:ensure t)
#+END_SRC

** langtool
#+BEGIN_SRC emacs-lisp
  (use-package langtool
	;; :ensure t
	:defer t
	:config
	(setq langtool-language-tool-jar
		  "/home/lem/Documents/LanguageTool-4.8/languagetool-commandline.jar"))
#+END_SRC

* Appearance
** Theme (sanityinc-tomorrow)
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)
#+END_SRC

